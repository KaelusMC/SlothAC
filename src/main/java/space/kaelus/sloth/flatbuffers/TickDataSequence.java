/*
 * This file is part of SlothAC - https://github.com/KaelusMC/SlothAC
 * Copyright (C) 2025 KaelusMC
 *
 * This file contains code derived from GrimAC.
 * The original authors of GrimAC are credited below.
 *
 * Copyright (c) 2021-2025 GrimAC, DefineOutside and contributors.
 *
 * SlothAC is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * SlothAC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

// automatically generated by the FlatBuffers compiler, do not modify
package space.kaelus.sloth.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TickDataSequence extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static TickDataSequence getRootAsTickDataSequence(ByteBuffer _bb) { return getRootAsTickDataSequence(_bb, new TickDataSequence()); }
  public static TickDataSequence getRootAsTickDataSequence(ByteBuffer _bb, TickDataSequence obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TickDataSequence __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public space.kaelus.sloth.flatbuffers.TickData ticks(int j) { return ticks(new space.kaelus.sloth.flatbuffers.TickData(), j); }
  public space.kaelus.sloth.flatbuffers.TickData ticks(space.kaelus.sloth.flatbuffers.TickData obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int ticksLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public space.kaelus.sloth.flatbuffers.TickData.Vector ticksVector() { return ticksVector(new space.kaelus.sloth.flatbuffers.TickData.Vector()); }
  public space.kaelus.sloth.flatbuffers.TickData.Vector ticksVector(space.kaelus.sloth.flatbuffers.TickData.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createTickDataSequence(FlatBufferBuilder builder,
      int ticksOffset) {
    builder.startTable(1);
    TickDataSequence.addTicks(builder, ticksOffset);
    return TickDataSequence.endTickDataSequence(builder);
  }

  public static void startTickDataSequence(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addTicks(FlatBufferBuilder builder, int ticksOffset) { builder.addOffset(0, ticksOffset, 0); }
  public static int createTicksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTicksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endTickDataSequence(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishTickDataSequenceBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedTickDataSequenceBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TickDataSequence get(int j) { return get(new TickDataSequence(), j); }
    public TickDataSequence get(TickDataSequence obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}
